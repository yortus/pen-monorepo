{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Pen",
	"patterns": [
		{"include": "#comment"},
		{"include": "#module"}
	],
	"repository": {
		"comment": {
            "patterns": [
                {
                    "begin": "/\\*",
                    "end": "\\*/",
                    "name": "comment.block.pen"
                },
                {
                    "match": "//.*$\\n?",
                    "name": "comment.line.double-slash.pen"
                }
            ]
        },
		"module": {
			"patterns": [
				{"include": "#comment"},
				{"include": "#keyword"},

				{"include": "#bindingPattern"},
				{"include": "#bindingName"},

				{"include": "#stringX"},
				{"include": "#stringA"},
				{"include": "#stringC"},
				{"include": "#literal"},
				{"include": "#moduleSpec"},
				{"include": "#identifier"},
				{"include": "#operator"}
			]
		},
		"bindingPattern": {
			"begin": "(?<!\\=\\s*)\\((?=[^)]*\\)\\s*(?:\\=|\\-\\>))",
			"end": "\\)(?=\\s*(?:\\=|\\-\\>))",
			"patterns": [
				{"include": "#comment"},
				{"include": "#keyword"},
				{
					"match": "(\\w+)(?=\\s+as)",
					"captures": {
						"1": {"name": "variable.other.pen"}
					}
				},
				{
					"match": "\\w+",
					"name": "variable.other.constant.pen"
				}

			]
        },
		"bindingName": {
			"match": "(\\w+)(?=\\s*(?:\\=|\\-\\>))",
			"captures": {
				"1": {"name": "variable.other.constant.pen"}
			}
        },
		"stringX": {
			"begin": "`",
			"end": "`",
			"name": "variable.other.pen",
			"patterns": [
				{
					"match": "\\\\x[0-9a-fA-F]+(?:-[0-9a-fA-F]+)?",
					"name": "variable.other.pen"
				},
				{
					"match": "\\\\[0-9]+(?:-[0-9]+)?",
					"name": "variable.other.pen"
				},
				{
					"match": "\\\\.",
					"name": "variable.other.pen"
				},
				{
					"begin": "\\{",
					"end": "\\}",
					"beginCaptures": {
						"0": {"name": "punctuation.definition.template-expression.begin.pen"}
					},
					"endCaptures": {
						"0": {"name": "punctuation.definition.template-expression.end.pen"}
					},
					"patterns": [
						{"include": "#module"}
					]
				}
			]
		},
		"stringA": {
			"begin": "'",
			"end": "'",
			"name": "support.function.pen",
			"patterns": [
				{
					"match": "\\\\x[0-9a-fA-F]+(?:-[0-9a-fA-F]+)?",
					"name": "support.function.pen"
				},
				{
					"match": "\\\\[0-9]+(?:-[0-9]+)?",
					"name": "support.function.pen"
				},
				{
					"match": "\\\\.",
					"name": "support.function.pen"
				},
				{
					"begin": "\\{",
					"end": "\\}",
					"beginCaptures": {
						"0": {"name": "punctuation.definition.template-expression.begin.pen"}
					},
					"endCaptures": {
						"0": {"name": "punctuation.definition.template-expression.end.pen"}
					},
					"patterns": [
						{"include": "#module"}
					]
				}
			]
		},
		"stringC": {
			"begin": "\"",
			"end": "\"",
			"name": "string.quoted.pen",
			"patterns": [
				{
					"match": "\\\\x[0-9a-fA-F]+(?:-[0-9a-fA-F]+)?",
					"name": "constant.character.escape.pen"
				},
				{
					"match": "\\\\[0-9]+(?:-[0-9]+)?",
					"name": "constant.character.escape.pen"
				},
				{
					"match": "\\\\.",
					"name": "constant.character.escape.pen"
				},
				{
					"begin": "\\{",
					"end": "\\}",
					"beginCaptures": {
						"0": {"name": "punctuation.definition.template-expression.begin.pen"}
					},
					"endCaptures": {
						"0": {"name": "punctuation.definition.template-expression.end.pen"}
					},
					"patterns": [
						{"include": "#module"}
					]
				}
			]
		},
		"literal": {
			"patterns": [
				{
					"match": "[+-]?(?:(?:[0-9]+(?:[.][0-9]*)?(?:[eE][+-]?[0-9]+)?)|(?:[.][0-9]+(?:[eE][+-]?[0-9]+)?))",
					"name": "support.function.pen"
				},
				{
					"match": "\\b(false|null|true)\\b",
					"name": "support.function.pen"
				}
			]
		},
		"moduleSpec": {
			"match": "(?<=import\\s*)'[^']*'",
			"name": "string.quoted.pen"
		},
		"keyword": {
			"patterns": [{
				"match": "\\b(abstract|as|concrete|export|import|not|0\\.\\.1|0\\.\\.m)\\b",
				"name": "keyword.control.pen"
			}]
		},
		"operator": {
			"patterns": [
				{
					"match": "[\\{\\}\\[\\]:,]|\\.\\.\\.",
					"name": "support.function.pen"
				},
				{
					"match": "[=|.!?*]|\\-\\>",
					"name": "keyword.operator.pen"
				}
			]
        },
		"identifier": {
			"patterns": [
				{
					"match": "[_A-Z][_A-Z0-9]*(?!\\w)",
					"name": "string.quoted.pen"
	        	},
				{
					"match": "\\w+(?=\\s*:)",
					"name": "support.function.pen"
	        	},
				{
					"match": "\\w+",
					"name": "variable.other.pen"
	        	}
			]
		}
	},
	"scopeName": "source.pen"
}