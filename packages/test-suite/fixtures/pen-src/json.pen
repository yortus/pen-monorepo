// ===============================================================================
// |                                  Imports                                    |
// ===============================================================================
import 'std' as (floatString)
import 'experiments' as (unicode)


// ===============================================================================
// |                                  Exports                                    |
// ===============================================================================
start = WS   Value   WS


// ===============================================================================
// |                               Implementation                                |
// ===============================================================================

// ---------- Top-Level JSON Values ----------
Value =
    |   False
    |   Null
    |   True
    |   Object
    |   Array
    |   Number
    |   String

// ---------- Primitive values ----------
False   = "false"   false
Null    = "null"   null
True    = "true"   true

// ---------- Objects ----------
Object      = LBRACE   ({[String]: COLON Value}   0..m {[COMMA String]: COLON Value}   |   {})   RBRACE
// Equivalent expression but using tail-recursive splice:
Object2     = LBRACE   (Properties | {})   RBRACE
Properties  = {[String]: COLON Value, ...(COMMA Properties | {})}   // NB: tail-recursive form - impl efficient handling

// ---------- Arrays ----------
Array       = LBRACKET   (([Value]   0..m [COMMA Value]) | [])   RBRACKET
// Equivalent expression but using tail-recursive splice:
Array2      = LBRACKET   (Elements | [])   RBRACKET
Elements    = [Value, ...(COMMA Elements | [])]                     // NB: tail-recursive form - impl efficient handling

// ---------- Numbers ----------
Number = floatString

// ---------- Strings ----------
String = DOUBLE_QUOTE   0..m CHAR   DOUBLE_QUOTE
// TODO: how is string of escape sequence chars (in SPAN) mapped to/from the single char it represents? (in NODE)
//       - something akin to `intString` which parses a number from the input span, call it `char`. Understands common escape sequences
// TODO: should support wider charset than ascii - this is not full JSON
CHAR =
    |   not `\\`   not `\"`   `\x20-7F`                             // any ASCII char except '\', '"', or control char
    |   `\xC0-DF\x80-BF`                                            // any 2-byte utf8 char
    |   `\xE0-EF\x80-BF\x80-BF`                                     // any 3-byte utf8 char
    |   `\xF0-F7\x80-BF\x80-BF\x80-BF`                              // any 4-byte utf8 char
    |   "\\\""   '\"'                                               // quotation mark
    |   "\\\\"   '\\'                                               // reverse solidus
    |   "\\/"   '/'                                                 // solidus
    |   "\\b"   '\b'                                                // backspace
    |   "\\f"   '\f'                                                // formfeed
    |   "\\n"   '\n'                                                // newline
    |   "\\r"   '\r'                                                // carriage return
    |   "\\t"   '\t'                                                // horizontal tab
    |   "\\u"   unicode(base=16 minDigits=4 maxDigits=4)            // unicode escape sequence

// ---------- Literal characters ----------

LBRACE          = WS   "\{"   WS
RBRACE          = WS   "}"   WS
LBRACKET        = WS   "["   WS

RBRACKET        = WS   "]"   WS
COLON           = WS   ":"   WS
COMMA           = WS   ","   WS
DOUBLE_QUOTE    = "\""
WS              = 0..m (" " | "\t" | "\n" | "\r")
// TODO: below is equivalent to above, but blows out bench time ~2.5x!!! Optimise?
// WS              = concrete *(` ` | `\t` | `\n` | `\r`)




/* syntax ideas...
CHAR =
    |   ifnot   (`\x00-\x1f` | `\"` | `\\`)   then   anyChar        // any char except control char, " or \
    |   ...

WS              = repeat (` ` | `\t` | `\n` | `\r`)
WS              = repeat (` ` | `\t` | `\n` | `\r`) for 0..
WS              = for 0.. repeat (` ` | `\t` | `\n` | `\r`)
WS              = repeat (` ` | `\t` | `\n` | `\r`) 0.. times
WS              = repeat 0.. times (` ` | `\t` | `\n` | `\r`)
*/
