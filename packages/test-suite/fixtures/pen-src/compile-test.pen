x = `outer x`

nested = (
    REP = (a) -> a x a
    FUN = x -> x x
    x = `inner x`
    a = 42
)

letexpr = (
    -> lx `-` lx
    lx = `inner x`
    ly = `***`
)

start = nested.REP(a = x)
      | letexpr



// ================================================================================
// TODO: was...
// std = import 'std'
// 
// //a = (test=1).test
// 
// 
// //c1 = funcs.f1(33)
// c2 = f2(a = 44, test = one)
// 
// (f2) = funcs
// 
// funcs = (
//     //f1 = a -> a a
//     f2 = (a) -> a a
//     //f3 = (a, b) -> a b
//     //f4 = () -> ()
// 
//     one = `=== ONE ===`
// )
// 
// 
// 
// 
// 
// digits = (
//     one = (1)
//     two = 2
//     outer = mem
// )
// 
// (one as des) = digits
// ref = des
// mem = digits.two
// 
// xxx = (d = digits)
// one = 1
// 
// start = one | ref | mem | xxx.d.two | digits




// ================================================================================
// TODO: was...
// (floatString) = import 'std'
// 
// start = floatString x a b c
// 
// x = (
//     x1 = ?x.x1 `rest`
// )
// 
// a = `aaa`
// b = `pre` c
// c = `pre` b
// //e = f   // NB: illegal circular def
// //f = e   // NB: illegal circular def
// //g = g   // NB: illegal circular def
